@page "/DataBase"
@using Managment_Studio_with_Blazor.Interface

@inject IDataBaseService serves
@inject NavigationManager Navigation


<div class="mb-3 custom-text-size">
    <button class="btn btn-primary" @onclick="ToggleAddItem">Add Item</button>
</div>

@if (IsAddItemVisible)
{
    <div class="mb-3 custom-text-size">
        <input type="text" @bind="NewDatabaseName" placeholder="Enter Database Name" class="form-control" />
        <button class="btn btn-success mt-2" @onclick="() => CreateDatabaseAsync(NewDatabaseName)">Create Database</button>
        <button class="btn btn-secondary mt-2" @onclick="CancelAddItem">Cancel</button>
    </div>
}

@if (ErrorMessage != null)
{
    <div class="alert alert-danger mt-3 custom-text-size">@ErrorMessage</div>
}

<table class="table table-bordered custom-text-size">
    <thead>
        <tr>
            <th>Actions</th>
            <th>DataBase Name</th>
        </tr>
    </thead>
    <tbody>
        @if (ListDataBase != null && ListDataBase.Any())
        {
            @foreach (var item in ListDataBase)
            {
                <tr>
                    <td>
                        @if (ItemToEdit == item)
                        {
                            <button class="btn btn-sm btn-success" @onclick="() => SaveEditedItem(item)">Save Changes</button>
                            <button class="btn btn-sm btn-secondary" @onclick="CancelEditItem">Cancel</button>
                        }
                        else
                        {
                            <button class="btn btn-sm btn-warning" @onclick="() => StartEditItem(item)">Edit</button>
                            <button class="btn btn-sm btn-danger" @onclick="() => DeleteItem(item)">Delete</button>
                        }
                    </td>
                    <td>
                        @if (ItemToEdit == item)
                        {
                            <input type="text" @bind="EditedDatabaseName" class="form-control" />
                        }
                        else
                        {
                            @item
                        }
                    </td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="2" class="text-center custom-text-size">No Databases Found</td>
            </tr>
        }
    </tbody>
</table>






@code {
    private string NewDatabaseName { get; set; }
    private string EditedDatabaseName { get; set; }
    private string ErrorMessage { get; set; }
    private List<string> ListDataBase { get; set; } = new List<string>();
    private bool IsAddItemVisible { get; set; } = false;
    private string ItemToEdit { get; set; }

    protected override async Task OnInitializedAsync()
    {
        ListDataBase = await serves.ListDataBaseAsync();
    }

    private void ToggleAddItem()
    {
        IsAddItemVisible = !IsAddItemVisible;
    }

    public async Task<bool> CreateDatabaseAsync(string newDbName)
    {
        if (string.IsNullOrWhiteSpace(newDbName))
        {
            ErrorMessage = "Database name cannot be empty.";
            return false;
        }

        var existingDatabases = await serves.ListDataBaseAsync();
        if (existingDatabases.Contains(newDbName))
        {
            ErrorMessage = "A database with this name already exists.";
            return false;
        }

        await serves.CreateDatabaseAsync(newDbName);

        ListDataBase.Insert(0, newDbName);
        ErrorMessage = null;
        IsAddItemVisible = false;
        return true;
    }

    private void StartEditItem(string databaseName)
    {
        ItemToEdit = databaseName;
        EditedDatabaseName = databaseName;
    }

    private async Task SaveEditedItem(string oldDatabaseName)
    {
        if (string.IsNullOrWhiteSpace(EditedDatabaseName))
        {
            ErrorMessage = "Database name cannot be empty.";
            return;
        }

        await serves.UpdateDataBaseAsync(oldDatabaseName, EditedDatabaseName);

        ListDataBase = await serves.ListDataBaseAsync();
        ItemToEdit = null;
        ErrorMessage = null;
        return;
    }

    private void CancelEditItem()
    {
        ItemToEdit = null;
        ErrorMessage = null;
    }

    public async Task DeleteItem(string DataBaseName)
    {
        await serves.DeleteDataBaseAsync(DataBaseName);
        ListDataBase = await serves.ListDataBaseAsync();
    }

    private void CancelAddItem()
    {
        IsAddItemVisible = false;
        ErrorMessage = null;
    }
}
